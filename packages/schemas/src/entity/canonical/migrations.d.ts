import { CanonicalEntitySchema } from './index.js';
import type { z } from 'zod';
export declare function migrateCanonicalV1ToLatest(input: unknown): {
    status: "draft" | "published" | "archived";
    updatedAt: string;
    id: string & z.BRAND<"Ulid">;
    lineageId: string & z.BRAND<"Ulid">;
    version: number;
    kind: "character";
    createdAt: string;
    createdBy: string & z.BRAND<"Ulid">;
    updatedBy: string & z.BRAND<"Ulid">;
    contentRating: "g" | "pg" | "pg13" | "r" | "nc17";
    blockedTags: string[];
    ageCheck: boolean;
    attributes: {
        value: string | number | boolean | string[] | [number, number] | Record<string, unknown>;
        keyPath: string;
        confidence: number;
        updatedAt: string;
        evidenceRefs: string[];
        lastUpdatedBy?: (string & z.BRAND<"Ulid">) | undefined;
    }[];
    name: string;
    source?: string | undefined;
    bio?: string | undefined;
} | {
    status: "draft" | "published" | "archived";
    updatedAt: string;
    id: string & z.BRAND<"Ulid">;
    lineageId: string & z.BRAND<"Ulid">;
    version: number;
    kind: "item";
    createdAt: string;
    createdBy: string & z.BRAND<"Ulid">;
    updatedBy: string & z.BRAND<"Ulid">;
    contentRating: "g" | "pg" | "pg13" | "r" | "nc17";
    blockedTags: string[];
    ageCheck: boolean;
    attributes: {
        value: string | number | boolean | string[] | [number, number] | Record<string, unknown>;
        keyPath: string;
        confidence: number;
        updatedAt: string;
        evidenceRefs: string[];
        lastUpdatedBy?: (string & z.BRAND<"Ulid">) | undefined;
    }[];
    label: string;
    source?: string | undefined;
    rarity?: "common" | "uncommon" | "rare" | "legendary" | undefined;
} | {
    status: "draft" | "published" | "archived";
    updatedAt: string;
    id: string & z.BRAND<"Ulid">;
    lineageId: string & z.BRAND<"Ulid">;
    version: number;
    kind: "location";
    createdAt: string;
    createdBy: string & z.BRAND<"Ulid">;
    updatedBy: string & z.BRAND<"Ulid">;
    contentRating: "g" | "pg" | "pg13" | "r" | "nc17";
    blockedTags: string[];
    ageCheck: boolean;
    attributes: {
        value: string | number | boolean | string[] | [number, number] | Record<string, unknown>;
        keyPath: string;
        confidence: number;
        updatedAt: string;
        evidenceRefs: string[];
        lastUpdatedBy?: (string & z.BRAND<"Ulid">) | undefined;
    }[];
    title: string;
    source?: string | undefined;
    description?: string | undefined;
} | {
    status: "draft" | "published" | "archived";
    updatedAt: string;
    id: string & z.BRAND<"Ulid">;
    lineageId: string & z.BRAND<"Ulid">;
    version: number;
    kind: "promptTemplate";
    createdAt: string;
    createdBy: string & z.BRAND<"Ulid">;
    updatedBy: string & z.BRAND<"Ulid">;
    contentRating: "g" | "pg" | "pg13" | "r" | "nc17";
    blockedTags: string[];
    ageCheck: boolean;
    attributes: {
        value: string | number | boolean | string[] | [number, number] | Record<string, unknown>;
        keyPath: string;
        confidence: number;
        updatedAt: string;
        evidenceRefs: string[];
        lastUpdatedBy?: (string & z.BRAND<"Ulid">) | undefined;
    }[];
    template: string;
    variables: string[];
    source?: string | undefined;
} | {
    status: "draft" | "published" | "archived";
    updatedAt: string;
    id: string & z.BRAND<"Ulid">;
    lineageId: string & z.BRAND<"Ulid">;
    version: number;
    kind: "relationshipType";
    createdAt: string;
    createdBy: string & z.BRAND<"Ulid">;
    updatedBy: string & z.BRAND<"Ulid">;
    contentRating: "g" | "pg" | "pg13" | "r" | "nc17";
    blockedTags: string[];
    ageCheck: boolean;
    attributes: {
        value: string | number | boolean | string[] | [number, number] | Record<string, unknown>;
        keyPath: string;
        confidence: number;
        updatedAt: string;
        evidenceRefs: string[];
        lastUpdatedBy?: (string & z.BRAND<"Ulid">) | undefined;
    }[];
    name: string;
    allowedParticipants: number;
    exclusivity: "none" | "monogamous" | "poly";
    defaultStages: ("acquaintance" | "friendly" | "close" | "romantic" | "intimate" | "estranged")[];
    romanceEnabled: boolean;
    intimacyEscalationAllowed: boolean;
    source?: string | undefined;
};
export type MigratedCanonical = z.infer<typeof CanonicalEntitySchema>;
//# sourceMappingURL=migrations.d.ts.map